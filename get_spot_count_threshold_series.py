#! /usr/bin/env python

import matlab.engine
import pandas as pd
import numpy as np
from tmclient import TmClient
import argparse


def parse_arguments():
    parser = argparse.ArgumentParser(
        prog='get_spot_count_threshold_series',
        description=('Uses ObjByFilter.m to detect spots for a series of'
                     'thresholds. Images analysed are taken from the '
                     'input csv file which is generated by '
                     'get_intensity_extrema.py. Writes results as a '
                     'csv file.')
    )
    parser.add_argument(
        '-v', '--verbosity', action='count', default=0,
        help='increase logging verbosity'
    )
    parser.add_argument(
        '-H', '--host', default='app.tissuemaps.org',
        help='name of TissueMAPS server host'
    )
    parser.add_argument(
        '-P', '--port', type=int, default=80,
        help='number of the port to which the server listens (default: 80)'
    )
    parser.add_argument(
        '-u', '--user', dest='username', required=True,
        help='name of TissueMAPS user'
    )
    parser.add_argument(
        '--password', required=True,
        help='password of TissueMAPS user'
    )
    parser.add_argument(
        '-e', '--experiment', required=True,
        help='experiment name'
    )
    parser.add_argument(
        '-p', '--plate', type=str, default='plate01',
        help='plate name'
    )
    parser.add_argument(
        '-c', '--channel', type=str, default='wavelength-2',
        help='channel name'
    )
    parser.add_argument(
        '--input_batch_file', type=str, required=True,
        help='filename for batch input file (.pkl)'
    )
    parser.add_argument(
        '--input_aggregate_file', type=str, required=True,
        help='filename for the aggregated input file (.pkl)'
    )
    parser.add_argument(
        '-o', '--output_file', type=str, required=True,
        help='filename for output file (.csv)'
    )
    parser.add_argument(
        '-t', '--thresholds', default=[0.02, 0.04, 0.02],
        nargs=3, metavar=('start', 'end', 'step'),
        type=float, help='specify a range of thresholds'
    )

    return(parser.parse_args())


def percentile(n):
    def percentile_(x):
        return np.percentile(x, n)
    percentile_.__name__ = 'percentile_%s' % n
    return percentile_


def main(args):

    tmaps_api = TmClient(
        host=args.host,
        port=args.port,
        experiment_name=args.experiment,
        username=args.username,
        password=args.password
    )

    eng = matlab.engine.start_matlab()
    eng.addpath('/home/ubuntu/JtLibrary/src/matlab/', nargout=0)

    # read rescaling_limits and aggregate by control
    rescaling_limits = pd.read_pickle(args.input_batch_file)
    aggregated_limits = pd.read_pickle(args.input_aggregate_file)

    # set options for ObjByFilter.mls
    op = eng.cpsub.fspecialCP3D('2D LoG', 5.0)
    detection_thresholds = np.arange(
        args.thresholds[0],
        args.thresholds[1],
        args.thresholds[2])
    iImgLimes = matlab.double([0.01, 0.995])
    iRescaleThr = matlab.double([
        aggregated_limits.lower_limit.loc['negative']['percentile_10'],
        aggregated_limits.upper_limit.loc['negative']['percentile_80'],
        aggregated_limits.upper_limit.loc['positive']['percentile_40'],
        aggregated_limits.upper_limit.loc['positive']['percentile_80']])
    iObjIntensityThr = matlab.uint16([])
    DetectionBias = matlab.uint16([])

    spot_count = pd.DataFrame()
    for index, row in rescaling_limits.iterrows():

        image = tmaps_api.download_channel_image(
            channel_name=args.channel,
            plate_name=args.plate,
            well_name=row['well'],
            well_pos_y=row['site_y'],
            well_pos_x=row['site_x'],
            correct=True
        )

        image_matlab = matlab.double(image.tolist())

        for threshold in np.nditer(detection_thresholds):

            '''Note: second returned argument from ObjByFilter.m
            is matlab CC object (as a python dict) which stored the
            NumObjects attribute. This is the calculated spot count
            '''

            t = eng.cpsub.ObjByFilter(
                image_matlab, op, float(threshold), iImgLimes, iRescaleThr,
                iObjIntensityThr, True, [], DetectionBias, nargout=3
            )

            spot_count = spot_count.append(
                pd.DataFrame({
                    'threshold': threshold,
                    'well': row['well'],
                    'site_x': row['site_x'],
                    'site_y': row['site_y'],
                    'spot_count': int(t[1]['NumObjects'])
                }, index=[index])
            )

    spot_count = rescaling_limits.merge(spot_count)
    spot_count.to_csv(args.output_file, encoding='utf-8')

    return


if __name__ == '__main__':
    arguments = parse_arguments()
    main(arguments)
